events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Timeouts for long-running requests
    proxy_read_timeout 300s;
    proxy_connect_timeout 75s;
    
    # Buffer sizes for large responses
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;

    server {
        listen 8080;

        # Health check
        location /health {
            return 200 "OK";
            add_header Content-Type text/plain;
        }

        # Admin/Dashboard routes (using system-admin to avoid React router conflicts)
        # MUST come before the catch-all / route
        location = /system-admin {
            return 301 /system-admin/;
        }
        
        location /system-admin/ {
            # Strip the /system-admin prefix and pass to dashboard
            rewrite ^/system-admin/(.*)$ /dashboard/$1 break;
            proxy_pass http://stats_service:8012;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            # Important: tell the app it's being served from /system-admin
            proxy_set_header X-Forwarded-Prefix /system-admin;
        }

        # Frontend route (catch-all, must be after specific routes)
        location / {
            root /var/www/xavigate-frontend;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        # Backend routes
        # Auth service
        location /api/auth/ {
            proxy_pass http://auth_service:8014/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # Storage service (memory, logging, sessions)
        location /api/storage/ {
            proxy_pass http://storage_service:8011/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # Stats service
        location /api/stats/ {
            proxy_pass http://stats_service:8012/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # Chat service
        location /api/chat/ {
            proxy_pass http://chat_service:8015/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_read_timeout 300s;
        }

        # MNTest service
        location /api/mntest/ {
            proxy_pass http://mntest_service:8016/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # Vector service
        location /api/vector/ {
            proxy_pass http://vector_service:8017/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }
    }
}